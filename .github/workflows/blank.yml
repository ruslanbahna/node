name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "function fibonacci(n) {" >> performance-test.js
          echo "  if (n <= 1) return n;" >> performance-test.js
          echo "  return fibonacci(n - 1) + fibonacci(n - 2);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function factorial(n) {" >> performance-test.js
          echo "  let result = 1;" >> performance-test.js
          echo "  for (let i = 1; i <= n; i++) {" >> performance-test.js
          echo "    result *= i;" >> performance-test.js
          echo "  }" >> performance-test.js
          echo "  return result;" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function performSyncTask() {" >> performance-test.js
          echo "  fibonacci(30);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function performAsyncTask(callback) {" >> performance-test.js
          echo "  setTimeout(function() {" >> performance-test.js
          echo "    callback();" >> performance-test.js
          echo "  }, 1000);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runSyncTests() {" >> performance-test.js
          echo "  suite.add('Synchronous Fibonacci', () => performSyncTask())" >> performance-test.js
          echo "    .add('Synchronous Factorial', () => factorial(10))" >> performance-test.js
          echo "    .on('cycle', (event) => console.log(String(event.target)))" >> performance-test.js
          echo "    .run();" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runAsyncTests() {" >> performance-test.js
          echo "  suite.add('Asynchronous Task', (deferred) => performAsyncTask(() => deferred.resolve()), { defer: true })" >> performance-test.js
          echo "    .on('cycle', (event) => console.log(String(event.target)))" >> performance-test.js
          echo "    .run({ async: true });" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runComplexTests() {" >> performance-test.js
          echo "  const startTime = new Date().getTime();" >> performance-test.js
          echo "  while (new Date().getTime() - startTime < 20000) { /* Complex task here */ }" >> performance-test.js
          echo "  const endTime = new Date().getTime();" >> performance-test.js
          echo "  console.log('Total execution time: ' + (endTime - startTime) + ' ms');" >> performance-test.js
          echo "}" >> performance-test.js
          echo "runSyncTests();" >> performance-test.js
          echo "runAsyncTests();" >> performance-test.js
          echo "runComplexTests();" >> performance-test.js
          node performance-test.js

  node-performance-photon:
    runs-on: ubuntu-latest
    container:
      image: photon:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          tdnf update -y
          tdnf install -y nodejs
          npm --version

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "function fibonacci(n) {" >> performance-test.js
          echo "  if (n <= 1) return n;" >> performance-test.js
          echo "  return fibonacci(n - 1) + fibonacci(n - 2);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function factorial(n) {" >> performance-test.js
          echo "  let result = 1;" >> performance-test.js
          echo "  for (let i = 1; i <= n; i++) {" >> performance-test.js
          echo "    result *= i;" >> performance-test.js
          echo "  }" >> performance-test.js
          echo "  return result;" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function performSyncTask() {" >> performance-test.js
          echo "  fibonacci(30);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function performAsyncTask(callback) {" >> performance-test.js
          echo "  setTimeout(function() {" >> performance-test.js
          echo "    callback();" >> performance-test.js
          echo "  }, 1000);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runSyncTests() {" >> performance-test.js
          echo "  suite.add('Synchronous Fibonacci', () => performSyncTask())" >> performance-test.js
          echo "    .add('Synchronous Factorial', () => factorial(10))" >> performance-test.js
          echo "    .on('cycle', (event) => console.log(String(event.target)))" >> performance-test.js
          echo "    .run();" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runAsyncTests() {" >> performance-test.js
          echo "  suite.add('Asynchronous Task', (deferred) => performAsyncTask(() => deferred.resolve()), { defer: true })" >> performance-test.js
          echo "    .on('cycle', (event) => console.log(String(event.target)))" >> performance-test.js
          echo "    .run({ async: true });" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runComplexTests() {" >> performance-test.js
          echo "  const startTime = new Date().getTime();" >> performance-test.js
          echo "  while (new Date().getTime() - startTime < 20000) { /* Complex task here */ }" >> performance-test.js
          echo "  const endTime = new Date().getTime();" >> performance-test.js
          echo "  console.log('Total execution time: ' + (endTime - startTime) + ' ms');" >> performance-test.js
          echo "}" >> performance-test.js
          echo "runSyncTests();" >> performance-test.js
          echo "runAsyncTests();" >> performance-test.js
          echo "runComplexTests();" >> performance-test.js
          node performance-test.js
  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "function fibonacci(n) {" >> performance-test.js
          echo "  if (n <= 1) return n;" >> performance-test.js
          echo "  return fibonacci(n - 1) + fibonacci(n - 2);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function factorial(n) {" >> performance-test.js
          echo "  let result = 1;" >> performance-test.js
          echo "  for (let i = 1; i <= n; i++) {" >> performance-test.js
          echo "    result *= i;" >> performance-test.js
          echo "  }" >> performance-test.js
          echo "  return result;" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function performSyncTask() {" >> performance-test.js
          echo "  fibonacci(30);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function performAsyncTask(callback) {" >> performance-test.js
          echo "  setTimeout(function() {" >> performance-test.js
          echo "    callback();" >> performance-test.js
          echo "  }, 1000);" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runSyncTests() {" >> performance-test.js
          echo "  suite.add('Synchronous Fibonacci', () => performSyncTask())" >> performance-test.js
          echo "    .add('Synchronous Factorial', () => factorial(10))" >> performance-test.js
          echo "    .on('cycle', (event) => console.log(String(event.target)))" >> performance-test.js
          echo "    .run();" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runAsyncTests() {" >> performance-test.js
          echo "  suite.add('Asynchronous Task', (deferred) => performAsyncTask(() => deferred.resolve()), { defer: true })" >> performance-test.js
          echo "    .on('cycle', (event) => console.log(String(event.target)))" >> performance-test.js
          echo "    .run({ async: true });" >> performance-test.js
          echo "}" >> performance-test.js
          echo "function runComplexTests() {" >> performance-test.js
          echo "  const startTime = new Date().getTime();" >> performance-test.js
          echo "  while (new Date().getTime() - startTime < 20000) { /* Complex task here */ }" >> performance-test.js
          echo "  const endTime = new Date().getTime();" >> performance-test.js
          echo "  console.log('Total execution time: ' + (endTime - startTime) + ' ms');" >> performance-test.js
          echo "}" >> performance-test.js
          echo "runSyncTests();" >> performance-test.js
          echo "runAsyncTests();" >> performance-test.js
          echo "runComplexTests();" >> performance-test.js
          node performance-test.js





      

