name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "const tasks = [" >> performance-test.js
          echo "  { name: 'Fibonacci 35', task: () => { let a=0, b=1, f=1; for(let i=2; i<=35; i++){ f=a+b; a=b; b=f; } return f; } }," >> performance-test.js
          echo "  { name: 'Factorial 12', task: () => { let f=1; for(let i=1; i<=12; i++){ f*=i; } return f; } }," >> performance-test.js
          echo "  { name: 'Prime Check 10000019', task: () => { for(let i=2, s=Math.sqrt(10000019); i<=s; i++){ if(10000019 % i === 0) return false; } return 10000019 > 1; } }," >> performance-test.js
          echo "  { name: 'QuickSort 10000', task: () => { const sort = arr => arr.length <= 1 ? arr : sort(arr.filter(v => v < arr[0])).concat(arr.filter(v => v === arr[0])).concat(sort(arr.filter(v => v > arr[0]))); return sort(Array.from({length: 10000}, () => Math.floor(Math.random() * 10000))); } }," >> performance-test.js
          echo "  { name: 'Array Reduce 10000', task: () => Array.from({length: 10000}, (_, i) => i).reduce((acc, val) => acc + val, 0) }," >> performance-test.js
          echo "  { name: 'String Concatenation 1000', task: () => { let str = ''; for(let i=0; i<1000; i++){ str += 'a'; } return str; } }," >> performance-test.js
          echo "  { name: 'Map Operations 10000', task: () => { const map = new Map(); for(let i=0; i<10000; i++){ map.set(i, i*2); } return map.size; } }," >> performance-test.js
          echo "  { name: 'Set Operations 10000', task: () => { const set = new Set(); for(let i=0; i<10000; i++){ set.add(i); } return set.size; } }" >> performance-test.js
          echo "];" >> performance-test.js
          echo "tasks.forEach(({ name, task }) => suite.add(name, task));" >> performance-test.js
          echo "suite.on('cycle', event => {" >> performance-test.js
          echo "  const benchmark = event.target;" >> performance-test.js
          echo "  const stats = benchmark.stats;" >> performance-test.js
          echo "  console.log(\`Task: \${benchmark.name}, Time Elapsed: \${stats.mean + stats.moe} sec (mean ± margin of error)\`);" >> performance-test.js
          echo "})" >> performance-test.js
          echo "     .on('complete', function() {" >> performance-test.js
          echo "       console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));" >> performance-test.js
          echo "     })" >> performance-test.js
          echo "     .run({ 'async': true });" >> performance-test.js


  node-performance-photon:
    runs-on: ubuntu-latest
    container:
      image: photon:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          tdnf update -y
          tdnf install -y nodejs
          npm --version

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "const tasks = [" >> performance-test.js
          echo "  { name: 'Fibonacci 35', task: () => { let a=0, b=1, f=1; for(let i=2; i<=35; i++){ f=a+b; a=b; b=f; } return f; } }," >> performance-test.js
          echo "  { name: 'Factorial 12', task: () => { let f=1; for(let i=1; i<=12; i++){ f*=i; } return f; } }," >> performance-test.js
          echo "  { name: 'Prime Check 10000019', task: () => { for(let i=2, s=Math.sqrt(10000019); i<=s; i++){ if(10000019 % i === 0) return false; } return 10000019 > 1; } }," >> performance-test.js
          echo "  { name: 'QuickSort 10000', task: () => { const sort = arr => arr.length <= 1 ? arr : sort(arr.filter(v => v < arr[0])).concat(arr.filter(v => v === arr[0])).concat(sort(arr.filter(v => v > arr[0]))); return sort(Array.from({length: 10000}, () => Math.floor(Math.random() * 10000))); } }," >> performance-test.js
          echo "  { name: 'Array Reduce 10000', task: () => Array.from({length: 10000}, (_, i) => i).reduce((acc, val) => acc + val, 0) }," >> performance-test.js
          echo "  { name: 'String Concatenation 1000', task: () => { let str = ''; for(let i=0; i<1000; i++){ str += 'a'; } return str; } }," >> performance-test.js
          echo "  { name: 'Map Operations 10000', task: () => { const map = new Map(); for(let i=0; i<10000; i++){ map.set(i, i*2); } return map.size; } }," >> performance-test.js
          echo "  { name: 'Set Operations 10000', task: () => { const set = new Set(); for(let i=0; i<10000; i++){ set.add(i); } return set.size; } }" >> performance-test.js
          echo "];" >> performance-test.js
          echo "tasks.forEach(({ name, task }) => suite.add(name, task));" >> performance-test.js
          echo "suite.on('cycle', event => {" >> performance-test.js
          echo "  const benchmark = event.target;" >> performance-test.js
          echo "  const stats = benchmark.stats;" >> performance-test.js
          echo "  console.log(\`Task: \${benchmark.name}, Time Elapsed: \${stats.mean + stats.moe} sec (mean ± margin of error)\`);" >> performance-test.js
          echo "})" >> performance-test.js
          echo "     .on('complete', function() {" >> performance-test.js
          echo "       console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));" >> performance-test.js
          echo "     })" >> performance-test.js
          echo "     .run({ 'async': true });" >> performance-test.js

  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "const tasks = [" >> performance-test.js
          echo "  { name: 'Fibonacci 35', task: () => { let a=0, b=1, f=1; for(let i=2; i<=35; i++){ f=a+b; a=b; b=f; } return f; } }," >> performance-test.js
          echo "  { name: 'Factorial 12', task: () => { let f=1; for(let i=1; i<=12; i++){ f*=i; } return f; } }," >> performance-test.js
          echo "  { name: 'Prime Check 10000019', task: () => { for(let i=2, s=Math.sqrt(10000019); i<=s; i++){ if(10000019 % i === 0) return false; } return 10000019 > 1; } }," >> performance-test.js
          echo "  { name: 'QuickSort 10000', task: () => { const sort = arr => arr.length <= 1 ? arr : sort(arr.filter(v => v < arr[0])).concat(arr.filter(v => v === arr[0])).concat(sort(arr.filter(v => v > arr[0]))); return sort(Array.from({length: 10000}, () => Math.floor(Math.random() * 10000))); } }," >> performance-test.js
          echo "  { name: 'Array Reduce 10000', task: () => Array.from({length: 10000}, (_, i) => i).reduce((acc, val) => acc + val, 0) }," >> performance-test.js
          echo "  { name: 'String Concatenation 1000', task: () => { let str = ''; for(let i=0; i<1000; i++){ str += 'a'; } return str; } }," >> performance-test.js
          echo "  { name: 'Map Operations 10000', task: () => { const map = new Map(); for(let i=0; i<10000; i++){ map.set(i, i*2); } return map.size; } }," >> performance-test.js
          echo "  { name: 'Set Operations 10000', task: () => { const set = new Set(); for(let i=0; i<10000; i++){ set.add(i); } return set.size; } }" >> performance-test.js
          echo "];" >> performance-test.js
          echo "tasks.forEach(({ name, task }) => suite.add(name, task));" >> performance-test.js
          echo "suite.on('cycle', event => {" >> performance-test.js
          echo "  const benchmark = event.target;" >> performance-test.js
          echo "  const stats = benchmark.stats;" >> performance-test.js
          echo "  console.log(\`Task: \${benchmark.name}, Time Elapsed: \${stats.mean + stats.moe} sec (mean ± margin of error)\`);" >> performance-test.js
          echo "})" >> performance-test.js
          echo "     .on('complete', function() {" >> performance-test.js
          echo "       console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));" >> performance-test.js
          echo "     })" >> performance-test.js
          echo "     .run({ 'async': true });" >> performance-test.js




      

