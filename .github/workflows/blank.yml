name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install bcrypt

      - name: Run Node Performance Test
        run: |
          echo "const crypto = require('crypto');" > financial-operations-test.js
          echo "const bcrypt = require('bcrypt');" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "async function authenticateUser(username, password) {" >> financial-operations-test.js
          echo "  const mockUser = {" >> financial-operations-test.js
          echo "    username: 'user1'," >> financial-operations-test.js
          echo "    passwordHash: await bcrypt.hash('securepassword', 10)" >> financial-operations-test.js
          echo "  };" >> financial-operations-test.js
          echo "  if (username === mockUser.username && await bcrypt.compare(password, mockUser.passwordHash)) {" >> financial-operations-test.js
          echo "    return true;" >> financial-operations-test.js
          echo "  }" >> financial-operations-test.js
          echo "  return false;" >> financial-operations-test.js
          echo "}" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "function processTransaction(sender, receiver, amount) {" >> financial-operations-test.js
          echo "  console.log(\`Transaction processed: \${amount} from \${sender} to \${receiver}\`);" >> financial-operations-test.js
          echo "}" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "function encryptData(data, secret) {" >> financial-operations-test.js
          echo "  const cipher = crypto.createCipher('aes-256-cbc', secret);" >> financial-operations-test.js
          echo "  let encrypted = cipher.update(data, 'utf8', 'hex');" >> financial-operations-test.js
          echo "  encrypted += cipher.final('hex');" >> financial-operations-test.js
          echo "  return encrypted;" >> financial-operations-test.js
          echo "}" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "function decryptData(encrypted, secret) {" >> financial-operations-test.js
          echo "  const decipher = crypto.createDecipher('aes-256-cbc', secret);" >> financial-operations-test.js
          echo "  let decrypted = decipher.update(encrypted, 'hex', 'utf8');" >> financial-operations-test.js
          echo "  decrypted += decipher.final('utf8');" >> financial-operations-test.js
          echo "  return decrypted;" >> financial-operations-test.js
          echo "}" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "async function simulateFinancialOperations() {" >> financial-operations-test.js
          echo "  const username = 'user1';" >> financial-operations-test.js
          echo "  const password = 'securepassword';" >> financial-operations-test.js
          echo "  const isAuthenticated = await authenticateUser(username, password);" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "  if (isAuthenticated) {" >> financial-operations-test.js
          echo "    console.log('User authenticated successfully.');" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "    processTransaction('Alice', 'Bob', 100);" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "    const secret = 'encryptionkey';" >> financial-operations-test.js
          echo "    const transactionDetails = 'Alice pays Bob 100';" >> financial-operations-test.js
          echo "    const encryptedDetails = encryptData(transactionDetails, secret);" >> financial-operations-test.js
          echo "    console.log(\`Encrypted transaction details: \${encryptedDetails}\`);" >> financial-operations-test.js
          echo "" >> financial-operations-test.js
          echo "    const decryptedDetails = decryptData(encryptedDetails, secret);" >> financial-operations-test.js
          echo "    console.log(\`Decrypted transaction details: \${decryptedDetails}\`);" >> financial-operations-test.js
          echo "  } else {" >> financial-operations-test.js
          echo "    console.log('Authentication failed.');" >> financial-operations-test
          node financial-operations-test.js

  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > benchmark-test.js
          echo "const suite = new Benchmark.Suite;" >> benchmark-test.js
          
          echo "function fibSync(n) {" >> benchmark-test.js
          echo "  if (n < 2) return n;" >> benchmark-test.js
          echo "  return fibSync(n - 1) + fibSync(n - 2);" >> benchmark-test.js
          echo "}" >> benchmark-test.js

          echo "function fibAsync(n) {" >> benchmark-test.js
          echo "  return new Promise(resolve => {" >> benchmark-test.js
          echo "    if (n < 2) { resolve(n); return; }" >> benchmark-test.js
          echo "    resolve(fibAsync(n - 1).then(a => fibAsync(n - 2).then(b => a + b)));" >> benchmark-test.js
          echo "  });" >> benchmark-test.js
          echo "}" >> benchmark-test.js
          
          # Add the synchronous and asynchronous Fibonacci functions to the benchmark suite
          echo "suite.add('Sync Fibonacci', function() {" >> benchmark-test.js
          echo "  fibSync(10);" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".add('Async Fibonacci', {" >> benchmark-test.js
          echo "  defer: true," >> benchmark-test.js
          echo "  fn: function(deferred) {" >> benchmark-test.js
          echo "    fibAsync(10).then(() => deferred.resolve());" >> benchmark-test.js
          echo "  }" >> benchmark-test.js
          echo "})" >> benchmark-test.js

          echo "suite.add('RegExp#test', function() {" >> benchmark-test.js
          echo "  /o/.test('Hello World!');" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".add('String#indexOf', function() {" >> benchmark-test.js
          echo "  'Hello World!'.indexOf('o') > -1;" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".on('cycle', function(event) {" >> benchmark-test.js
          echo "  console.log(String(event.target));" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".on('complete', function() {" >> benchmark-test.js
          echo "  console.log('Fastest is ' + this.filter('fastest').map('name'));" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".run({ 'async': true });" >> benchmark-test.js
          node benchmark-test.js




      

