name: node-performance-test-ubuntu

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  node-performance-test-ubuntu:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install NVM, Node.js, and NPM
        run: |
          apt-get update && apt-get install -y curl
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm install 20.10.0
          echo "NVM_DIR=$NVM_DIR" >> $GITHUB_ENV
          echo "PATH=$PATH:$NVM_DIR/versions/node/$(nvm version)/bin" >> $GITHUB_ENV
        shell: bash

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            const totalStartTime = Date.now();

            suite
              .add('Async Operation Example', {
                defer: true,
                fn: function(deferred) {
                  asyncOperation().then(() => deferred.resolve());
                }
              })
              .add('Simulated Async File Read', { // Simulated asynchronous file read operation
                defer: true,
                fn: function(deferred) {
                  simulatedFileRead()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              .add('Async Delayed Computation', {
                defer: true,
                fn: function(deferred) {
                  delayedComputation()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              // Your existing synchronous tests...
              .add('Fibonacci Recursive', function() {
                const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);
                fib(30);
              })
              .add('Array Sorting', function() {
                const arr = Array.from({ length: 10 }, () => Math.random());
                arr.sort((a, b) => a - b);
              })
              .add('String Manipulation', function() {
                let str = '';
                for (let i = 0; i < 10; i++) str += 'a';
              })
              .add('Map Operations', function() {
                const map = new Map();
                for (let i = 0; i < 10; i++) map.set(i, i * i);
              })
              .add('Set Operations', function() {
                const set = new Set();
                for (let i = 0; i < 10; i++) set.add(i);
              })
              .add('JSON Parsing', function() {
                const json = JSON.stringify(Array.from({ length: 10 }, (_, i) => ({ num: i })));
                JSON.parse(json);
              })
              .add('RegExp Matching', function() {
                const str = 'hello world';
                /o/.test(str); // Correct use of RegExp
              })
              .add('Math Operations', function() {
                for (let i = 0; i < 10; i++) Math.sqrt(i);
              })
              .on('cycle', event => console.log(String(event.target)))
              .on('complete', function() {
                console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));
                const totalEndTime = Date.now();
                console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');
              })
              .run({ async: true });

            console.log('Benchmark test started...');

            // Original simulated asynchronous operation
            function asyncOperation() {
              return new Promise(resolve => setTimeout(resolve, 100)); // Simulates a 100ms asynchronous task
            }

            // Simulated async file read operation
            function simulatedFileRead() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate reading file content by resolving with some data
                  resolve('File content');
                }, 50); // Simulate a file read taking 50ms
              });
            }

            // Async delayed computation
            function delayedComputation() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate some computation
                  let sum = 0;
                  for (let i = 0; i < 1000000; i++) {
                    sum += i;
                  }
                  resolve(sum);
                }, 100); // Delay of 100ms
              });
            }
          "

  node-performance-test-photon:
    runs-on: ubuntu-latest
    container:
      image: photon:latest

    steps:
      - name: Install NVM, Node.js, and NPM
        run: |
          tdnf check-update
          tdnf update --allowerasing --assumeyes
          tdnf --setopt=tsflags=nodocs --allowerasing --assumeyes install nodejs
          npm install -g yarn
          tdnf list installed | grep nodejs

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            const totalStartTime = Date.now();

            suite
              .add('Async Operation Example', {
                defer: true,
                fn: function(deferred) {
                  asyncOperation().then(() => deferred.resolve());
                }
              })
              .add('Simulated Async File Read', { // Simulated asynchronous file read operation
                defer: true,
                fn: function(deferred) {
                  simulatedFileRead()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              .add('Async Delayed Computation', {
                defer: true,
                fn: function(deferred) {
                  delayedComputation()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              // Your existing synchronous tests...
              .add('Fibonacci Recursive', function() {
                const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);
                fib(30);
              })
              .add('Array Sorting', function() {
                const arr = Array.from({ length: 10 }, () => Math.random());
                arr.sort((a, b) => a - b);
              })
              .add('String Manipulation', function() {
                let str = '';
                for (let i = 0; i < 10; i++) str += 'a';
              })
              .add('Map Operations', function() {
                const map = new Map();
                for (let i = 0; i < 10; i++) map.set(i, i * i);
              })
              .add('Set Operations', function() {
                const set = new Set();
                for (let i = 0; i < 10; i++) set.add(i);
              })
              .add('JSON Parsing', function() {
                const json = JSON.stringify(Array.from({ length: 10 }, (_, i) => ({ num: i })));
                JSON.parse(json);
              })
              .add('RegExp Matching', function() {
                const str = 'hello world';
                /o/.test(str); // Correct use of RegExp
              })
              .add('Math Operations', function() {
                for (let i = 0; i < 10; i++) Math.sqrt(i);
              })
              .on('cycle', event => console.log(String(event.target)))
              .on('complete', function() {
                console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));
                const totalEndTime = Date.now();
                console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');
              })
              .run({ async: true });

            console.log('Benchmark test started...');

            // Original simulated asynchronous operation
            function asyncOperation() {
              return new Promise(resolve => setTimeout(resolve, 100)); // Simulates a 100ms asynchronous task
            }

            // Simulated async file read operation
            function simulatedFileRead() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate reading file content by resolving with some data
                  resolve('File content');
                }, 50); // Simulate a file read taking 50ms
              });
            }

            // Async delayed computation
            function delayedComputation() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate some computation
                  let sum = 0;
                  for (let i = 0; i < 1000000; i++) {
                    sum += i;
                  }
                  resolve(sum);
                }, 100); // Delay of 100ms
              });
            }
          "
  node-performance-test-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: install bash
        run: |
          apk update && apk add --update bash
          apk add --update nodejs npm
          npm install -g yarn
          apk info -s
  
      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            const totalStartTime = Date.now();

            suite
              .add('Async Operation Example', {
                defer: true,
                fn: function(deferred) {
                  asyncOperation().then(() => deferred.resolve());
                }
              })
              .add('Simulated Async File Read', { // Simulated asynchronous file read operation
                defer: true,
                fn: function(deferred) {
                  simulatedFileRead()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              .add('Async Delayed Computation', {
                defer: true,
                fn: function(deferred) {
                  delayedComputation()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              // Your existing synchronous tests...
              .add('Fibonacci Recursive', function() {
                const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);
                fib(30);
              })
              .add('Array Sorting', function() {
                const arr = Array.from({ length: 10 }, () => Math.random());
                arr.sort((a, b) => a - b);
              })
              .add('String Manipulation', function() {
                let str = '';
                for (let i = 0; i < 10; i++) str += 'a';
              })
              .add('Map Operations', function() {
                const map = new Map();
                for (let i = 0; i < 10; i++) map.set(i, i * i);
              })
              .add('Set Operations', function() {
                const set = new Set();
                for (let i = 0; i < 10; i++) set.add(i);
              })
              .add('JSON Parsing', function() {
                const json = JSON.stringify(Array.from({ length: 10 }, (_, i) => ({ num: i })));
                JSON.parse(json);
              })
              .add('RegExp Matching', function() {
                const str = 'hello world';
                /o/.test(str); // Correct use of RegExp
              })
              .add('Math Operations', function() {
                for (let i = 0; i < 10; i++) Math.sqrt(i);
              })
              .on('cycle', event => console.log(String(event.target)))
              .on('complete', function() {
                console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));
                const totalEndTime = Date.now();
                console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');
              })
              .run({ async: true });

            console.log('Benchmark test started...');

            // Original simulated asynchronous operation
            function asyncOperation() {
              return new Promise(resolve => setTimeout(resolve, 100)); // Simulates a 100ms asynchronous task
            }

            // Simulated async file read operation
            function simulatedFileRead() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate reading file content by resolving with some data
                  resolve('File content');
                }, 50); // Simulate a file read taking 50ms
              });
            }

            // Async delayed computation
            function delayedComputation() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate some computation
                  let sum = 0;
                  for (let i = 0; i < 1000000; i++) {
                    sum += i;
                  }
                  resolve(sum);
                }, 100); // Delay of 100ms
              });
            }
          "
  node-performance-test-ubuntu-with-package:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install curl
        run: |
          apt-get update
          apt-get install -y curl bc 

      - name: Capture pre-installation package state
        run: dpkg-query -W --showformat='${Installed-Size}\t${Package}\n' > /tmp/pre_install_packages.txt


      - name: Setup Node.js and Install Packages
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          npm install -g yarn
 

      - name: Capture post-installation package state
        run: dpkg-query -W --showformat='${Installed-Size}\t${Package}\n' > /tmp/post_install_packages.txt
 

      - name: Compare package states and calculate total size
        run: |
          echo "Newly installed packages and their sizes (in KB):"
          grep -vxFf /tmp/pre_install_packages.txt /tmp/post_install_packages.txt
          total_size_kb=$(grep -vxFf /tmp/pre_install_packages.txt /tmp/post_install_packages.txt | awk '{s+=$1} END {print s}')
          echo "Total size of newly installed packages: ${total_size_kb} KB"
          total_size_mb=$(echo "scale=2; ${total_size_kb} / 1024" | bc)
          echo "Total size of newly installed packages: ${total_size_mb} MB"
 


      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            const totalStartTime = Date.now();

            suite
              .add('Async Operation Example', {
                defer: true,
                fn: function(deferred) {
                  asyncOperation().then(() => deferred.resolve());
                }
              })
              .add('Simulated Async File Read', { // Simulated asynchronous file read operation
                defer: true,
                fn: function(deferred) {
                  simulatedFileRead()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              .add('Async Delayed Computation', {
                defer: true,
                fn: function(deferred) {
                  delayedComputation()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              // Your existing synchronous tests...
              .add('Fibonacci Recursive', function() {
                const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);
                fib(30);
              })
              .add('Array Sorting', function() {
                const arr = Array.from({ length: 10 }, () => Math.random());
                arr.sort((a, b) => a - b);
              })
              .add('String Manipulation', function() {
                let str = '';
                for (let i = 0; i < 10; i++) str += 'a';
              })
              .add('Map Operations', function() {
                const map = new Map();
                for (let i = 0; i < 10; i++) map.set(i, i * i);
              })
              .add('Set Operations', function() {
                const set = new Set();
                for (let i = 0; i < 10; i++) set.add(i);
              })
              .add('JSON Parsing', function() {
                const json = JSON.stringify(Array.from({ length: 10 }, (_, i) => ({ num: i })));
                JSON.parse(json);
              })
              .add('RegExp Matching', function() {
                const str = 'hello world';
                /o/.test(str); // Correct use of RegExp
              })
              .add('Math Operations', function() {
                for (let i = 0; i < 10; i++) Math.sqrt(i);
              })
              .on('cycle', event => console.log(String(event.target)))
              .on('complete', function() {
                console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));
                const totalEndTime = Date.now();
                console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');
              })
              .run({ async: true });

            console.log('Benchmark test started...');

            // Original simulated asynchronous operation
            function asyncOperation() {
              return new Promise(resolve => setTimeout(resolve, 100)); // Simulates a 100ms asynchronous task
            }

            // Simulated async file read operation
            function simulatedFileRead() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate reading file content by resolving with some data
                  resolve('File content');
                }, 50); // Simulate a file read taking 50ms
              });
            }

            // Async delayed computation
            function delayedComputation() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate some computation
                  let sum = 0;
                  for (let i = 0; i < 1000000; i++) {
                    sum += i;
                  }
                  resolve(sum);
                }, 100); // Delay of 100ms
              });
            }
          "
  node-performance-test-alpine-node:
    runs-on: ubuntu-latest
    container:
      image: node:alpine

    steps:
      - name: Install bash (optional)
        run: apk update && apk add --no-cache bash

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            const totalStartTime = Date.now();

            suite
              .add('Async Operation Example', {
                defer: true,
                fn: function(deferred) {
                  asyncOperation().then(() => deferred.resolve());
                }
              })
              .add('Simulated Async File Read', { // Simulated asynchronous file read operation
                defer: true,
                fn: function(deferred) {
                  simulatedFileRead()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              .add('Async Delayed Computation', {
                defer: true,
                fn: function(deferred) {
                  delayedComputation()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              // Your existing synchronous tests...
              .add('Fibonacci Recursive', function() {
                const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);
                fib(30);
              })
              .add('Array Sorting', function() {
                const arr = Array.from({ length: 10 }, () => Math.random());
                arr.sort((a, b) => a - b);
              })
              .add('String Manipulation', function() {
                let str = '';
                for (let i = 0; i < 10; i++) str += 'a';
              })
              .add('Map Operations', function() {
                const map = new Map();
                for (let i = 0; i < 10; i++) map.set(i, i * i);
              })
              .add('Set Operations', function() {
                const set = new Set();
                for (let i = 0; i < 10; i++) set.add(i);
              })
              .add('JSON Parsing', function() {
                const json = JSON.stringify(Array.from({ length: 10 }, (_, i) => ({ num: i })));
                JSON.parse(json);
              })
              .add('RegExp Matching', function() {
                const str = 'hello world';
                /o/.test(str); // Correct use of RegExp
              })
              .add('Math Operations', function() {
                for (let i = 0; i < 10; i++) Math.sqrt(i);
              })
              .on('cycle', event => console.log(String(event.target)))
              .on('complete', function() {
                console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));
                const totalEndTime = Date.now();
                console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');
              })
              .run({ async: true });

            console.log('Benchmark test started...');

            // Original simulated asynchronous operation
            function asyncOperation() {
              return new Promise(resolve => setTimeout(resolve, 100)); // Simulates a 100ms asynchronous task
            }

            // Simulated async file read operation
            function simulatedFileRead() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate reading file content by resolving with some data
                  resolve('File content');
                }, 50); // Simulate a file read taking 50ms
              });
            }

            // Async delayed computation
            function delayedComputation() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate some computation
                  let sum = 0;
                  for (let i = 0; i < 1000000; i++) {
                    sum += i;
                  }
                  resolve(sum);
                }, 100); // Delay of 100ms
              });
            }
          "
  node-performance-test-cbl-mariner:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/cbl-mariner/base/nodejs:18

    steps:
      - name: Install update
        run: |
          tdnf check-update 
          npm install -g yarn

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            const totalStartTime = Date.now();

            suite
              .add('Async Operation Example', {
                defer: true,
                fn: function(deferred) {
                  asyncOperation().then(() => deferred.resolve());
                }
              })
              .add('Simulated Async File Read', { // Simulated asynchronous file read operation
                defer: true,
                fn: function(deferred) {
                  simulatedFileRead()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              .add('Async Delayed Computation', {
                defer: true,
                fn: function(deferred) {
                  delayedComputation()
                    .then(() => deferred.resolve())
                    .catch(console.error);
                }
              })
              // Your existing synchronous tests...
              .add('Fibonacci Recursive', function() {
                const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);
                fib(30);
              })
              .add('Array Sorting', function() {
                const arr = Array.from({ length: 10 }, () => Math.random());
                arr.sort((a, b) => a - b);
              })
              .add('String Manipulation', function() {
                let str = '';
                for (let i = 0; i < 10; i++) str += 'a';
              })
              .add('Map Operations', function() {
                const map = new Map();
                for (let i = 0; i < 10; i++) map.set(i, i * i);
              })
              .add('Set Operations', function() {
                const set = new Set();
                for (let i = 0; i < 10; i++) set.add(i);
              })
              .add('JSON Parsing', function() {
                const json = JSON.stringify(Array.from({ length: 10 }, (_, i) => ({ num: i })));
                JSON.parse(json);
              })
              .add('RegExp Matching', function() {
                const str = 'hello world';
                /o/.test(str); // Correct use of RegExp
              })
              .add('Math Operations', function() {
                for (let i = 0; i < 10; i++) Math.sqrt(i);
              })
              .on('cycle', event => console.log(String(event.target)))
              .on('complete', function() {
                console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));
                const totalEndTime = Date.now();
                console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');
              })
              .run({ async: true });

            console.log('Benchmark test started...');

            // Original simulated asynchronous operation
            function asyncOperation() {
              return new Promise(resolve => setTimeout(resolve, 100)); // Simulates a 100ms asynchronous task
            }

            // Simulated async file read operation
            function simulatedFileRead() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate reading file content by resolving with some data
                  resolve('File content');
                }, 50); // Simulate a file read taking 50ms
              });
            }

            // Async delayed computation
            function delayedComputation() {
              return new Promise(resolve => {
                setTimeout(() => {
                  // Simulate some computation
                  let sum = 0;
                  for (let i = 0; i < 1000000; i++) {
                    sum += i;
                  }
                  resolve(sum);
                }, 100); // Delay of 100ms
              });
            }
          "