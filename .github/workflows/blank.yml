name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          # Define 8 diverse functions
          echo "suite.add('Fibonacci Recursive', function() {" >> performance-test.js
          echo "  const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);" >> performance-test.js
          echo "  fib(10);" >> performance-test.js
          echo "}).add('Array Sorting', function() {" >> performance-test.js
          echo "  const arr = Array.from({ length: 1000 }, () => Math.random());" >> performance-test.js
          echo "  arr.sort((a, b) => a - b);" >> performance-test.js
          echo "}).add('String Manipulation', function() {" >> performance-test.js
          echo "  let str = '';" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) str += 'a';" >> performance-test.js
          echo "}).add('Map Operations', function() {" >> performance-test.js
          echo "  const map = new Map();" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) map.set(i, i * i);" >> performance-test.js
          echo "}).add('Set Operations', function() {" >> performance-test.js
          echo "  const set = new Set();" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) set.add(i);" >> performance-test.js
          echo "}).add('JSON Parsing', function() {" >> performance-test.js
          echo "  const json = JSON.stringify(Array.from({ length: 1000 }, (_, i) => ({ num: i }))); " >> performance-test.js
          echo "  JSON.parse(json);" >> performance-test.js
          echo "}).add('RegExp Matching', function() {" >> performance-test.js
          echo "  const str = 'hello world';" >> performance-test.js
          echo "  /o/.test(str);" >> performance-test.js
          echo "}).add('Math Operations', function() {" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) Math.sqrt(i);" >> performance-test.js
          echo "});" >> performance-test.js
          # Capture total execution time
          echo "const totalStartTime = Date.now();" >> performance-test.js
          echo "suite.on('cycle', event => console.log(String(event.target)))" >> performance-test.js
          echo "     .on('complete', function() {" >> performance-test.js
          echo "       console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));" >> performance-test.js
          echo "       const totalEndTime = Date.now();" >> performance-test.js
          echo "       console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');" >> performance-test.js
          echo "     })" >> performance-test.js
          echo "     .run({ 'async': true });" >> performance-test.js
          echo "console.log('Benchmark test started...');" >> performance-test.js
          node performance-test.js


  node-performance-photon:
    runs-on: ubuntu-latest
    container:
      image: photon:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          tdnf update -y
          tdnf install -y nodejs
          npm --version

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          # Define 8 diverse functions
          echo "suite.add('Fibonacci Recursive', function() {" >> performance-test.js
          echo "  const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);" >> performance-test.js
          echo "  fib(10);" >> performance-test.js
          echo "}).add('Array Sorting', function() {" >> performance-test.js
          echo "  const arr = Array.from({ length: 1000 }, () => Math.random());" >> performance-test.js
          echo "  arr.sort((a, b) => a - b);" >> performance-test.js
          echo "}).add('String Manipulation', function() {" >> performance-test.js
          echo "  let str = '';" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) str += 'a';" >> performance-test.js
          echo "}).add('Map Operations', function() {" >> performance-test.js
          echo "  const map = new Map();" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) map.set(i, i * i);" >> performance-test.js
          echo "}).add('Set Operations', function() {" >> performance-test.js
          echo "  const set = new Set();" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) set.add(i);" >> performance-test.js
          echo "}).add('JSON Parsing', function() {" >> performance-test.js
          echo "  const json = JSON.stringify(Array.from({ length: 1000 }, (_, i) => ({ num: i }))); " >> performance-test.js
          echo "  JSON.parse(json);" >> performance-test.js
          echo "}).add('RegExp Matching', function() {" >> performance-test.js
          echo "  const str = 'hello world';" >> performance-test.js
          echo "  /o/.test(str);" >> performance-test.js
          echo "}).add('Math Operations', function() {" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) Math.sqrt(i);" >> performance-test.js
          echo "});" >> performance-test.js
          # Capture total execution time
          echo "const totalStartTime = Date.now();" >> performance-test.js
          echo "suite.on('cycle', event => console.log(String(event.target)))" >> performance-test.js
          echo "     .on('complete', function() {" >> performance-test.js
          echo "       console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));" >> performance-test.js
          echo "       const totalEndTime = Date.now();" >> performance-test.js
          echo "       console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');" >> performance-test.js
          echo "     })" >> performance-test.js
          echo "     .run({ 'async': true });" >> performance-test.js
          echo "console.log('Benchmark test started...');" >> performance-test.js
          node performance-test.js

  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          # Define 8 diverse functions
          echo "suite.add('Fibonacci Recursive', function() {" >> performance-test.js
          echo "  const fib = (n) => n < 2 ? n : fib(n - 1) + fib(n - 2);" >> performance-test.js
          echo "  fib(10);" >> performance-test.js
          echo "}).add('Array Sorting', function() {" >> performance-test.js
          echo "  const arr = Array.from({ length: 1000 }, () => Math.random());" >> performance-test.js
          echo "  arr.sort((a, b) => a - b);" >> performance-test.js
          echo "}).add('String Manipulation', function() {" >> performance-test.js
          echo "  let str = '';" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) str += 'a';" >> performance-test.js
          echo "}).add('Map Operations', function() {" >> performance-test.js
          echo "  const map = new Map();" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) map.set(i, i * i);" >> performance-test.js
          echo "}).add('Set Operations', function() {" >> performance-test.js
          echo "  const set = new Set();" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) set.add(i);" >> performance-test.js
          echo "}).add('JSON Parsing', function() {" >> performance-test.js
          echo "  const json = JSON.stringify(Array.from({ length: 1000 }, (_, i) => ({ num: i }))); " >> performance-test.js
          echo "  JSON.parse(json);" >> performance-test.js
          echo "}).add('RegExp Matching', function() {" >> performance-test.js
          echo "  const str = 'hello world';" >> performance-test.js
          echo "  /o/.test(str);" >> performance-test.js
          echo "}).add('Math Operations', function() {" >> performance-test.js
          echo "  for (let i = 0; i < 1000; i++) Math.sqrt(i);" >> performance-test.js
          echo "});" >> performance-test.js
          # Capture total execution time
          echo "const totalStartTime = Date.now();" >> performance-test.js
          echo "suite.on('cycle', event => console.log(String(event.target)))" >> performance-test.js
          echo "     .on('complete', function() {" >> performance-test.js
          echo "       console.log('All tasks completed. Fastest is ' + this.filter('fastest').map('name'));" >> performance-test.js
          echo "       const totalEndTime = Date.now();" >> performance-test.js
          echo "       console.log('Total execution time: ' + (totalEndTime - totalStartTime) + ' ms');" >> performance-test.js
          echo "     })" >> performance-test.js
          echo "     .run({ 'async': true });" >> performance-test.js
          echo "console.log('Benchmark test started...');" >> performance-test.js
          node performance-test.js




      

