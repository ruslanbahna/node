name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            
            ['asyncTest1', 'syncTest2', 'asyncTest3'].forEach(testName => {
              suite.add(testName, {
                defer: true,
                fn: deferred => {
                  let completed = 0;
                  const startTime = process.hrtime();
                  
                  for (let i = 0; i < 1000000; i++) {
                    if (testName === 'asyncTest1') Math.sqrt(i);
                    else if (testName === 'syncTest2') Math.pow(i, 2);
                    else if (testName === 'asyncTest3') Math.log(i);
                    
                    if (++completed === 1000000) {
                      const endTime = process.hrtime(startTime);
                      deferred.resolve(endTime[0] * 1e9 + endTime[1]);
                    }
                  }
                }
              });
            });
            
            suite.on('cycle', function(event) {
              console.log(String(event.target));
            });
            
            suite.on('complete', function() {
              const fastest = this.filter('fastest').map('name');
              console.log('Fastest is ' + fastest);
            });
            
            suite.run({ async: true });
          "

  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();
            
            ['asyncTest1', 'syncTest2', 'asyncTest3'].forEach(testName => {
              suite.add(testName, {
                defer: true,
                fn: deferred => {
                  let completed = 0;
                  const startTime = process.hrtime();
                  
                  for (let i = 0; i < 1000000; i++) {
                    if (testName === 'asyncTest1') Math.sqrt(i);
                    else if (testName === 'syncTest2') Math.pow(i, 2);
                    else if (testName === 'asyncTest3') Math.log(i);
                    
                    if (++completed === 1000000) {
                      const endTime = process.hrtime(startTime);
                      deferred.resolve(endTime[0] * 1e9 + endTime[1]);
                    }
                  }
                }
              });
            });
            
            suite.on('cycle', function(event) {
              console.log(String(event.target));
            });
            
            suite.on('complete', function() {
              const fastest = this.filter('fastest').map('name');
              console.log('Fastest is ' + fastest);
            });
            
            suite.run({ async: true });
          "




      

