name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo 'Running asynchronous Test 1...'
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();

            suite.add('asyncTest1', {
              defer: true,
              fn: deferred => {
                setImmediate(() => {
                  for (let i = 0; i < 1000000; i++) {
                    Math.sqrt(i);
                  }
                  deferred.resolve();
                });
              }
            });

            suite.on('cycle', function(event) {
              console.log(String(event.target));
            });

            suite.on('complete', function() {
              console.log('Fastest is ' + this.filter('fastest').map('name'));
            });

            suite.run({ async: true });
          "

          echo 'Running synchronous Test 2...'
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();

            suite.add('syncTest2', {
              fn: function() {
                for (let i = 0; i < 1000000; i++) {
                  Math.pow(i, 2);
                }
              }
            });

            suite.on('cycle', function(event) {
              console.log(String(event.target));
            });

            suite.on('complete', function() {
              console.log('Fastest is ' + this.filter('fastest').map('name'));
            });

            suite.run();
          "

          echo 'Running asynchronous Test 3...'
          node -e "
            const Benchmark = require('benchmark');
            const suite = new Benchmark.Suite();

            suite.add('asyncTest3', {
              defer: true,
              fn: deferred => {
                setImmediate(() => {
                  for (let i = 0; i < 1000000; i++) {
                    Math.log(i);
                  }
                  deferred.resolve();
                });
              }
            });

            suite.on('cycle', function(event) {
              console.log(String(event.target));
            });

            suite.on('complete', function() {
              console.log('Fastest is ' + this.filter('fastest').map('name'));
            });

            suite.run({ async: true });
          "

  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > benchmark-test.js
          echo "const suite = new Benchmark.Suite;" >> benchmark-test.js
          
          echo "function fibSync(n) {" >> benchmark-test.js
          echo "  if (n < 2) return n;" >> benchmark-test.js
          echo "  return fibSync(n - 1) + fibSync(n - 2);" >> benchmark-test.js
          echo "}" >> benchmark-test.js

          echo "function fibAsync(n) {" >> benchmark-test.js
          echo "  return new Promise(resolve => {" >> benchmark-test.js
          echo "    if (n < 2) { resolve(n); return; }" >> benchmark-test.js
          echo "    resolve(fibAsync(n - 1).then(a => fibAsync(n - 2).then(b => a + b)));" >> benchmark-test.js
          echo "  });" >> benchmark-test.js
          echo "}" >> benchmark-test.js
          
          # Add the synchronous and asynchronous Fibonacci functions to the benchmark suite
          echo "suite.add('Sync Fibonacci', function() {" >> benchmark-test.js
          echo "  fibSync(10);" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".add('Async Fibonacci', {" >> benchmark-test.js
          echo "  defer: true," >> benchmark-test.js
          echo "  fn: function(deferred) {" >> benchmark-test.js
          echo "    fibAsync(10).then(() => deferred.resolve());" >> benchmark-test.js
          echo "  }" >> benchmark-test.js
          echo "})" >> benchmark-test.js

          echo "suite.add('RegExp#test', function() {" >> benchmark-test.js
          echo "  /o/.test('Hello World!');" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".add('String#indexOf', function() {" >> benchmark-test.js
          echo "  'Hello World!'.indexOf('o') > -1;" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".on('cycle', function(event) {" >> benchmark-test.js
          echo "  console.log(String(event.target));" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".on('complete', function() {" >> benchmark-test.js
          echo "  console.log('Fastest is ' + this.filter('fastest').map('name'));" >> benchmark-test.js
          echo "})" >> benchmark-test.js
          echo ".run({ 'async': true });" >> benchmark-test.js
          node benchmark-test.js




      

