name: python-performance-test

on:
  push:
    branches:
      - '*'
  workflow_dispatch:
    
jobs:
  python-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
    - name: Install Python and Pip
      run: |
        apt-get update
        apt-get install -y python3 python3-pip
    - name: Install pyperformance
      run: python3 -m pip install pyperformance
    - name: Run PyPerformance
      run: pyperformance run --affinity=1 --benchmarks=deepcopy

  node-performance-test:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apt-get update
          apt-get install -y nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "const fibonacci = (n) => n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2);" >> performance-test.js
          echo "const factorial = (n) => n === 0 ? 1 : n * factorial(n - 1);" >> performance-test.js
          echo "const performSyncTask = () => fibonacci(30);" >> performance-test.js
          echo "const performAsyncTask = (callback) => setTimeout(callback, 1000);" >> performance-test.js
          echo "let totalTests = 0, completedTests = 0;" >> performance-test.js
          echo "const runTests = (name, task, options = {}) => {" >> performance-test.js
          echo "  totalTests++;" >> performance-test.js
          echo "  suite.add(name, function(deferred) {" >> performance-test.js
          echo "    if (options.defer) task(deferred); else task();" >> performance-test.js
          echo "  }, options)" >> performance-test.js
          echo "    .on('complete', function() {" >> performance-test.js
          echo "      completedTests++;" >> performance-test.js
          echo "      if (completedTests === totalTests) {" >> performance-test.js
          echo "        const endTime = new Date().getTime();" >> performance-test.js
          echo "        console.log('Total execution time for all tests: ' + (endTime - startTime) + ' ms');" >> performance-test.js
          echo "      }" >> performance-test.js
          echo "    });" >> performance-test.js
          echo "};" >> performance-test.js
          echo "const startTime = new Date().getTime();" >> performance-test.js
          echo "runTests('Synchronous Fibonacci', performSyncTask);" >> performance-test.js
          echo "runTests('Synchronous Factorial', () => factorial(10));" >> performance-test.js
          echo "runTests('Asynchronous Task', (deferred) => performAsyncTask(() => { deferred.resolve(); }), { defer: true });" >> performance-test.js
          echo "suite.on('cycle', (event) => console.log(String(event.target))).run({ 'async': true });" >> performance-test.js
          node performance-test.js


  node-performance-photon:
    runs-on: ubuntu-latest
    container:
      image: photon:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          tdnf update -y
          tdnf install -y nodejs
          npm --version

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "const fibonacci = (n) => n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2);" >> performance-test.js
          echo "const factorial = (n) => n === 0 ? 1 : n * factorial(n - 1);" >> performance-test.js
          echo "const performSyncTask = () => fibonacci(30);" >> performance-test.js
          echo "const performAsyncTask = (callback) => setTimeout(callback, 1000);" >> performance-test.js
          echo "let totalTests = 0, completedTests = 0;" >> performance-test.js
          echo "const runTests = (name, task, options = {}) => {" >> performance-test.js
          echo "  totalTests++;" >> performance-test.js
          echo "  suite.add(name, function(deferred) {" >> performance-test.js
          echo "    if (options.defer) task(deferred); else task();" >> performance-test.js
          echo "  }, options)" >> performance-test.js
          echo "    .on('complete', function() {" >> performance-test.js
          echo "      completedTests++;" >> performance-test.js
          echo "      if (completedTests === totalTests) {" >> performance-test.js
          echo "        const endTime = new Date().getTime();" >> performance-test.js
          echo "        console.log('Total execution time for all tests: ' + (endTime - startTime) + ' ms');" >> performance-test.js
          echo "      }" >> performance-test.js
          echo "    });" >> performance-test.js
          echo "};" >> performance-test.js
          echo "const startTime = new Date().getTime();" >> performance-test.js
          echo "runTests('Synchronous Fibonacci', performSyncTask);" >> performance-test.js
          echo "runTests('Synchronous Factorial', () => factorial(10));" >> performance-test.js
          echo "runTests('Asynchronous Task', (deferred) => performAsyncTask(() => { deferred.resolve(); }), { defer: true });" >> performance-test.js
          echo "suite.on('cycle', (event) => console.log(String(event.target))).run({ 'async': true });" >> performance-test.js
          node performance-test.js

  node-performance-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest

    steps:
      - name: Install Node.js and NPM
        run: |
          apk update
          apk add --no-cache nodejs npm

      - name: Install Benchmark.js
        run: npm install benchmark

      - name: Run Node Performance Test
        run: |
          echo "const Benchmark = require('benchmark');" > performance-test.js
          echo "const suite = new Benchmark.Suite();" >> performance-test.js
          echo "const fibonacci = (n) => n <= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2);" >> performance-test.js
          echo "const factorial = (n) => n === 0 ? 1 : n * factorial(n - 1);" >> performance-test.js
          echo "const performSyncTask = () => fibonacci(30);" >> performance-test.js
          echo "const performAsyncTask = (callback) => setTimeout(callback, 1000);" >> performance-test.js
          echo "let totalTests = 0, completedTests = 0;" >> performance-test.js
          echo "const runTests = (name, task, options = {}) => {" >> performance-test.js
          echo "  totalTests++;" >> performance-test.js
          echo "  suite.add(name, function(deferred) {" >> performance-test.js
          echo "    if (options.defer) task(deferred); else task();" >> performance-test.js
          echo "  }, options)" >> performance-test.js
          echo "    .on('complete', function() {" >> performance-test.js
          echo "      completedTests++;" >> performance-test.js
          echo "      if (completedTests === totalTests) {" >> performance-test.js
          echo "        const endTime = new Date().getTime();" >> performance-test.js
          echo "        console.log('Total execution time for all tests: ' + (endTime - startTime) + ' ms');" >> performance-test.js
          echo "      }" >> performance-test.js
          echo "    });" >> performance-test.js
          echo "};" >> performance-test.js
          echo "const startTime = new Date().getTime();" >> performance-test.js
          echo "runTests('Synchronous Fibonacci', performSyncTask);" >> performance-test.js
          echo "runTests('Synchronous Factorial', () => factorial(10));" >> performance-test.js
          echo "runTests('Asynchronous Task', (deferred) => performAsyncTask(() => { deferred.resolve(); }), { defer: true });" >> performance-test.js
          echo "suite.on('cycle', (event) => console.log(String(event.target))).run({ 'async': true });" >> performance-test.js
          node performance-test.js




      

